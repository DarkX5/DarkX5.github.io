{"flags":0,"id":32,"mSourceText":"\/\/imported Classes\nLL.bindClass(\"java.io.File\");\nLL.bindClass(\"java.io.FileWriter\");\n\n\/\/Default Values\n\nvar containerId = 114;\n\nvar pathTaskerVars = \"\/sdcard\/0Sync\/Other\/.TaskerPersistentVars\/\";\nvar pathTaskerLightningVars = \"\/sdcard\/0Sync\/Other\/.TaskerPersistentVars\/LightningVars\/\";\nvar animationDelay = 500; \/\/time in ms\n\nvar mainSplitter = \"<s>\";\nvar secondarySplitter = \"<p>\";\n\nvar defaultColor = new Object();\ndefaultColor.royalBlue = 0xff2f9ec2;\ndefaultColor.onTogg = 0xffffffff;\ndefaultColor.offTogg = 0x202f9ec2;\ndefaultColor.onToggLabel = 0xffffffff;\ndefaultColor.offToggLabel = 0x80ffffff;\ndefaultColor.mainLabel = 0xff2f9ec2;\ndefaultColor.secondaryLabel = 0xffffffff;\ndefaultColor.loadingLabel = 0xffff0000;\ndefaultColor.mainTime = 0xff2f9ec2;\ndefaultColor.secondaryTime = 0xffffffff;\ndefaultColor.mainBattery = 0xff2f9ec2;\ndefaultColor.secondaryBattery = 0xffffffff;\ndefaultColor.mainAlarm = 0xff2f9ec2;\ndefaultColor.secondaryAlarm = 0xffffffff;\ndefaultColor.mainWorkEnd = 0xff2f9ec2;\ndefaultColor.secondaryWorkEnd = 0xffffffff;\ndefaultColor.mainCalendar = 0xff2f9ec2;\ndefaultColor.secondaryCalendar = 0xffffffff;\ndefaultColor.mainDebug = 0xff2f9ec2;\ndefaultColor.secondaryDebug = 0xffffffff;\n\nvar monthArr = {};\nmonthArr.longLower = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"octomber\", \"november\", \"december\"];\nmonthArr.shortLower = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"];\nmonthArr.long = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"Octomber\", \"November\", \"December\"];\nmonthArr.short = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nvar weekdayArr = {};\nweekdayArr.longLower = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\nweekdayArr.shortLower = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\nweekdayArr.long = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nweekdayArr.short = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nvar nullArray = [null, undefined, \"null\", \"undefined\", \"\"];\n\n\/\/Prototypes Add-ons\n\n\/\/string replaceAll characters\nString.prototype.replaceAll = function(search, replace) { \n\n    if (isNullOrEmpty(replace))\n        return String(this);\n\n    return this.replace(new RegExp('[' + search + ']', 'g'), replace);\n}\n\n\/\/add m minutes to date\nDate.prototype.addMinutes = function(m) {\n\n    this.setTime(this.getTime() + (m * 60 * 1000)); \n    return this;\n\n}\n\n\/\/add h hour to date\nDate.prototype.addHours = function(h) {\n\n    this.setTime(this.getTime() + (h * 60 * 60 * 1000)); \n    return this;\n\n}\n\n\/\/add d days to date\nDate.prototype.addDays = function(d) {\n\n    this.setTime(this.getTime() + (d * 24 * 60 * 60 * 1000)); \n    return this;\n\n}\n\n\n\/\/Functions\n\n\/\/verificare NullOrEmpty \nfunction isNullOrEmpty(value) {\n\n    var emptyArr = [\"undefined\", \"null\", \"NaN\", \"\"]\n    var emptyObj = [\"{}\", \"[]\"];\n\n    if (emptyObj.indexOf(JSON.stringify(value)) > -1) \n        return true; \n    try\n\t{ \n        value = value.replace(\/ \/g, \"\"); } \n    catch(ex) { } \n    if (emptyArr.indexOf(String(value)) > -1) \n        return true; \n\n    return false; \n};\n\n\n\/\/get Script Data Array\nfunction getData(splitter) {\n\n    var ev = LL.getEvent().getData();\n\n    if (!isNullOrEmpty(ev))\n\t{\n        if (isNullOrEmpty(splitter))\n            return ev.split(mainSplitter);\n        else\n            return ev.split(String(splitter));\n    }\n    else\n        return null; \n\n}\n\nfunction getJSONData() {\n\n    var evData = LL.getEvent().getData();\n\n    if (!isNullOrEmpty(evData))\n        return JSON.parse(evData);\n    else\n        return null;\n\n}\n\n\n\/\/get Item by Name\nfunction getItem(contId, Name) {\n\n    var cont = LL.getContainerById(contId);\n    var items = cont.getItems();\n\n    for (var i = items.getLength() - 1; i >= 0; --i)\n\t{\n        var item = items.getAt(i);\n        if (item.getName() == Name)\n            return item;\n    }\n\n}\n\n\n\/\/set Item Label Color (0xff000000)\nfunction setLabelColor(item, itemLabelColor) {\n\n    var prop = item.getProperties();\n\n    prop.edit()\n        .setInteger(\"s.labelFontColor\", itemLabelColor)\n        .commit();\n\n}\n\n\n\/\/get date difference\nfunction dateDiff(date1, date2) {\n\n    var ds = new Date(date1);\n    var de = new Date(date2);\n    var diff = ds.getTime() - de.getTime();\n\n    var s = 1000;\n    var mi = s * 60;\n    var h = mi * 60;\n    var d = h * 24;\n    var w = d * 7;\n    var y = d * 365.25;\n\n    var res = new Object();\n    res.seconds = parseInt(diff \/ s);\n    res.minutes = parseInt(diff \/ mi);\n    res.hours = parseInt(diff \/ h);\n    res.days = parseInt(diff \/ d);\n    res.weeks = parseInt(diff \/ w);\n    res.years = parseInt(diff \/ y);\n\n    res.months = parseInt(y * 12);\n\n    return res;\n\n}\n\n\/\/get absolute date difference\nfunction absDateDiff(date1, date2) {\n\n    var ds = new Date(date1);\n    var de = new Date(date2);\n    var diff = ds.getTime() - de.getTime();\n    if (diff < 0)\n        diff *= -1;\n\n    var s = 1000;\n    var m = s * 60;\n    var h = m * 60;\n    var d = h * 24;\n    var w = d * 7;\n    var y = d * 365.25;\n\n    var res = new Object();\n    res.seconds = Math.round(diff \/ s);\n    res.minutes = Math.round(diff \/ m);\n    res.hours = Math.round(diff \/ h);\n    res.days = Math.round(diff \/ d);\n    res.weeks = Math.round(diff \/ w);\n    res.years = Math.round(diff \/ y);\n\n    res.months = Math.round(y * 12)\n\n    return res;\n\n}\n\nfunction parseTime(dt, returnFormat) {\n\n    var parDate; \n    var tempDate, tempTime; \n    var dateOk = false; \n    var h, m, t, sm, st; \/\/sm\/st = separator minutes\/tt\n    var returnVar = \"\";\n\n    if (dt == \"today\")\n    { \n        parDate = new Date(); \n        dateOk = true; \n    }\n    else    if ((dt == null) || (dt == undefined))\n\t\treturn null; \n\n    if (dateOk == false)\n    { \n        parDate = new Date(dt); \n        if (parDate == \"Invalid Date\")\n        { \n            parDate = String(dt); \n            if (parDate.indexOf(\"-\") >= 0) \n                tempDate = parDate.split(\"-\"); \n            else if (parDate.indexOf(\".\") >= 0) \n                tempDate = parDate.split(\".\"); \n            else if (parDate.indexOf(\"\/\") >= 0) \n                tempDate = parDate.split(\"\/\"); \n\n            parDate = new Date(tempDate[0] + \"\/\" + tempDate[1] + \"\/\" + tempDate[2]); \n            if (parDate == \"Invalid Date\") \n                parDate = new Date(tempDate[1] + \"\/\" + tempDate[0] + \"\/\" + tempDate[2]); \n            if (parDate == \"Invalid Date\") \n                parDate = new Date(tempDate[2] + \"\/\" + tempDate[0] + \"\/\" + tempDate[1]); \n            if (parDate == \"Invalid Date\") \n                parDate = new Date(tempDate[2] + \"\/\" + tempDate[1] + \"\/\" + tempDate[0]); \n        }\n    }\n\n    if (parDate == \"Invalid Date\")\n\t{\n        showToast(\"Date could not be parsed\");\n        return null;\n    }\n\n    if (isNullOrEmpty(returnFormat))\n        returnFormat = \"hhmm: \"\n    sm = returnFormat[returnFormat.length - 2];\n\n    if (returnFormat.indexOf(\"h\") > -1)\n\t{\n        h = parDate.getHours();\n        if (returnFormat.indexOf(\"t\") > -1)\n\t\t{\n            if (h >= 12)\n\t\t\t{\n                t = \"PM\";\n                if (h > 12)\n                    h -= 12;\n            }\n            else\n                t = \"AM\";\n        }\n\n        if ((returnFormat.indexOf(\"hh\") > -1) && (h < 10))\n            h = \"0\" + h;\n    }\n    else\n\t{\n        h = \"\";\n        sm = \"\";\n    }\n\n    if (returnFormat.indexOf(\"m\") > -1)\n\t{\n        m = parDate.getMinutes();\n        if ((returnFormat.indexOf(\"mm\") > -1) && (m < 10))\n            m = \"0\" + m;\n    }\n    else\n\t{\n        m = \"\";\n        sm = \"\";\n    }\n\n    if (returnFormat.indexOf(\"t\") > -1)\n        st = returnFormat[returnFormat.length - 1];\n    else\n\t{\n        t = \"\";\n        st = \"\";\n    }\n\n    if (returnFormat.indexOf(\"mh\") > -1)\n        returnVar = String(m + sm + h + st + t);\n    else\n        returnVar = String(h + sm + m + st + t);\n\n    if (isNullOrEmpty(returnVar))\n\t{\n        showToast(\"Matching time format not found\");\n        return null;\n    }\n\n    return String(returnVar);\n\n}\n\n\/\/parse given date to returnFormat\nfunction parseDate(dt, returnFormat) {\n\/\/returnFormat: any characters can be defined as date\/time splitters\n\/\/returnFormat: \"dmy\/\" - \"25\/01\/2016\"; \"dmyy\/\" - \"25\/01\/16\"; \n\/\/returnFormat: \"dmy\/.\" - \"25\/01\/2016 07.35\"; \"dmyy\/|\" - \"25\/01\/16 07|35\"\n    var parDate; \n    var tempDate, tempTime; \n    var dateOk = false; \n    var d, dd, mm, yy, shortYear; \n    var returnVar = \"\";\n    var z = 0;\n\n    if (dt == \"today\")\n    { \n        parDate = new Date(); \n        dateOk = true; \n    }\n    else    if ((dt == null) || (dt == undefined))\n\t\treturn null; \n\n    if (dateOk == false)\n    { \n        parDate = new Date(dt); \n        if (parDate == \"Invalid Date\")\n        { \n            parDate = String(dt); \n            if (parDate.indexOf(\"-\") >= 0) \n                tempDate = parDate.split(\"-\"); \n            else if (parDate.indexOf(\".\") >= 0) \n                tempDate = parDate.split(\".\"); \n            else if (parDate.indexOf(\"\/\") >= 0) \n                tempDate = parDate.split(\"\/\"); \n\n            parDate = new Date(tempDate[0] + \"\/\" + tempDate[1] + \"\/\" + tempDate[2]); \n            if (parDate == \"Invalid Date\") \n                parDate = new Date(tempDate[1] + \"\/\" + tempDate[0] + \"\/\" + tempDate[2]); \n            if (parDate == \"Invalid Date\") \n                parDate = new Date(tempDate[2] + \"\/\" + tempDate[0] + \"\/\" + tempDate[1]); \n            if (parDate == \"Invalid Date\") \n                parDate = new Date(tempDate[2] + \"\/\" + tempDate[1] + \"\/\" + tempDate[0]); \n        }\n    }\n\n    if ((parDate != null) && (parDate != \"Invalid Date\") && (parDate != undefined))\n    {\n\n        dd = parDate.getDate();\n        if (dd < 10) dd = \"0\" + dd;\n        mm = parDate.getMonth() + 1;\n        if (mm < 10) mm = \"0\" + mm;\n        yy = parDate.getFullYear();\n        h = parDate.getHours();\n        m = parDate.getMinutes();\n\n        if (isNullOrEmpty(returnFormat))\n\t\t{\n            return parDate;\n        }\n\n        if (returnFormat.indexOf(\"yy\") >= 0)\n        {\n            if (returnFormat.length > 5)\n                z = 5;\n            if (returnFormat.indexOf(\"dmy\") >= 0)\n                returnVar = String(dd + returnFormat[4] + mm + returnFormat[4] + (yy % 100)) ;\n            if (returnFormat.indexOf(\"ydm\") >= 0)\n                returnVar = String((yy % 100) + returnFormat[4] + dd + returnFormat[4] + mm) ;\n            if (returnFormat.indexOf(\"ymd\") >= 0)\n                returnVar = String((yy % 100) + returnFormat[4] + mm + returnFormat[4] + dd) ;\n            if (returnFormat.indexOf(\"mdy\") >= 0)\n                returnVar = String(mm + returnFormat[4] + dd + returnFormat[4] + (yy % 100)) ;\n            if (returnFormat.indexOf(\"dyym\") >= 0)\n                returnVar = String(dd + returnFormat[4] + (yy % 100) + returnFormat[4] + mm) ;\n            if (returnFormat.indexOf(\"myyd\") >= 0)\n                returnVar = String(mm + returnFormat[4] + (yy % 100) + returnFormat[4] + dd) ;\n        }\n        else\n        {\n            if (returnFormat.length > 4)\n                z = 4;\n            if (returnFormat.indexOf(\"dmy\") >= 0)\n                returnVar = String(dd + returnFormat[3] + mm + returnFormat[3] + yy) ;\n            if (returnFormat.indexOf(\"ydm\") >= 0)\n                returnVar = String(yy + returnFormat[3] + dd + returnFormat[3] + mm) ;\n            if (returnFormat.indexOf(\"ymd\") >= 0)\n                returnVar = String(yy + returnFormat[3] + mm + returnFormat[3] + dd) ;\n            if (returnFormat.indexOf(\"mdy\") >= 0)\n                returnVar = String(mm + returnFormat[3] + dd + returnFormat[3] + yy) ;\n            if (returnFormat.indexOf(\"dym\") >= 0)\n                returnVar = String(dd + returnFormat[3] + yy + returnFormat[3] + mm) ;\n            if (returnFormat.indexOf(\"myd\") >= 0)\n                returnVar = String(mm + returnFormat[3] + yy + returnFormat[3] + dd) ;\n        }\n    }\n    else\n\t{\n        showToast(\"Date could not be parsed\");\n        return null;\n    }\n\n    if (isNullOrEmpty(returnVar))\n\t{\n        showToast(\"Matching date format not found\");\n        return null;\n    }\n\n    if (z > 0)\n    {\n        returnVar = returnVar + \" \" + h + returnFormat[z] + m;\n    }\n\n    return String(returnVar);\n};\n\n\/\/get formatted Year\nfunction getYear(date, yearformat) {\n\n    if (yearformat.indexOf(\"yy\") > -1)\n        return String(date.getFullYear());\n    else\n\t{\n        if (yearformat.indexOf(\"y\") > -1)\n            return String(date.getYear());\n        else\n            return null;\n    }\n\n}\n\n\/\/get formatted Month\nfunction getMonth(mno, monthformat) {\n\n    if (monthformat.indexOf(\"mmm\") > -1)\n        return monthArr.long[mno];\n    else\n\t{\n        if (monthformat.indexOf(\"mm\") > -1)\n            return monthArr.short[mno];\n        else\n\t\t{\n\t\t\tif (monthformat.indexOf(\"m\") > -1)\n                return String(mno);\n            else\n                return null;\n        }\n    }\n\n}\n\n\n\/\/get formatted Weekday\nfunction getWeekDay(wdno, dayformat) {\n\n    if (dayformat.indexOf(\"ddd\") > -1)\n        return weekdayArr.long[wdno];\n    else\n\t{\n\t\tif (dayformat.indexOf(\"dd\") > -1)\n\t\t\treturn weekdayArr.short[wdno];\n\t\telse\n\t\t{\n\t\t\tif (dayformat.indexOf(\"d\") > -1)\n\t\t\t\treturn String(wdno);\n\t\t\telse\n\t\t\t\treturn null;\n\t\t}\n    }\n\n}\n\n\/\/set Timer\nfunction timerSet(dth, mi) {\n\n    var result = {};\n    var dtNow = new Date();\n    var dtNext;\n\n    if (isNullOrEmpty(dth))\n\t{\n        result.date = \"-\";\n        result.time = \"-\";\n    }\n    else\n\t{\n\t\tif (!isNullOrEmpty(mi))\n\t\t{\n\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\tdtNext = dtNow;\n\t\t\t\tdtNext.addHours(dth);\n\t\t\t\tdtNext.addMinutes(mi);\n\n\t\t\t\tresult.date = parseDate(dtNext, \"dmy.\");\n\t\t\t\tresult.time = parseTime(dtNext, \"hhmmt: \");\n\n\t\t\t}catch(ex){ showToast(exMess + ex); }\n\t\t}\n\t\telse\n\t\t\tdtNext = new Date(dth);\n\n\t\ttry\n\t\t{\n\n\t\t\tvar diff = dateDiff(dtNext, dtNow);\n\t\t\tvar todayleft = 1440 - (dtNow.getHours() * 60) - dtNow.getMinutes();\n\t\t\tvar daysleft = parseInt(diff.minutes \/ 1440);\n\t\t\tvar hleft = diff.hours;\n\t\t\tvar minleft = (parseInt(diff.minutes + 1) - (parseInt(diff.hours) * 60));\n\t\t\tvar tminleft = diff.minutes;\n\t\t\tvar day = \"-\";\n\n\t\t\tif ((parseInt(hleft) > -1) && (parseInt(hleft) < 10))\n\t\t\t\thleft = \"0\" + hleft;\n\t\t\tif ((parseInt(minleft) > -1) && (parseInt(minleft) < 10))\n\t\t\t\tminleft = \"0\" + minleft;\n\t\t\tif ((parseInt(tminleft) > -1) && (parseInt(tminleft) < 10))\n\t\t\t\ttminleft = \"0\" + tminleft;\n\n\t\t\tif (diff.minutes < todayleft)\n\t\t\t\tday = \"Today\";\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (diff.minutes < todayleft + 1440)\n\t\t\t\t\tday = \"Tomorrow\";\n\t\t\t\telse\n\t\t\t\t\tday = dtNext.getDate() + \".\" + getMonth(dtNext.getMonth(), \"mm\") + \".\" + dtNext.getFullYear();\n\t\t\t}\n\n\t\t\tresult.date = parseDate(dtNext, \"dmy.\");\n\t\t\tresult.time = parseTime(dtNext, \"hhmmt: \");\n\t\t\tresult.hleft = String(hleft);\n\t\t\tresult.minleft = String(minleft);\n\t\t\tresult.tminleft = String(tminleft);\n\t\t\tresult.day = String(day);\n\n\t\t}catch(ex){ showToast(exMess + ex); };\n    }\n    return result;\n}\n\n\/\/get Next Alarm Object\nfunction getNextAlarmInfo() {\n\n    LL.bindClass(\"android.provider.Settings\");\n    var alarm = Settings.System.getString(LL. getContext(). getContentResolver(), Settings.System.NEXT_ALARM_FORMATTED);\n\n    var now = new Date();\n    var wds = weekdayArr.shortLower;\n    var alarmInfo = new Object();\n\n    var temp;\n    var todayleft = 1440 - (now.getHours() * 60) - now.getMinutes();\n\n\tif (!isNullOrEmpty(alarm))\n\t{\n\t\ttemp = alarm.split(\" \");\n\n\t\talarmInfo.date = null;\n\t\talarmInfo.weekday = temp[0];\n\t\talarmInfo.year = null;\n\t\talarmInfo.month = null;\n\t\talarmInfo.day = null;\n\t\talarmInfo.daysleft = 0;\n\t  \talarmInfo.time = temp[1] + \" \" + temp[2];\n\t  \talarmInfo.timeleft = null;\n\t\talarmInfo.hour = temp[1].split(\":\")[0];\n\t\talarmInfo.hoursleft = 0;\n\t\talarmInfo.minute = temp[1].split(\":\")[1];\n\t  \talarmInfo.minutesleft = 0;\n\t\talarmInfo.tt = temp[2];\n\t}\n\telse\n\t{\n\t\talarmInfo.date = \"-- . --- . ----\";\n\t\talarmInfo.weekday = \"-\";\n\t\talarmInfo.year = \"----\";\n\t\talarmInfo.month = \"---\";\n\t\talarmInfo.day = \"-- . -- . ----\";\n\t\talarmInfo.daysleft = \"-\";\n\t  \talarmInfo.time = \"-- : --\";\n\t  \talarmInfo.timeleft = \"-- h   -- m\";\n\t\talarmInfo.hour = \"--\"\n\t\talarmInfo.hoursleft = \"-\";\n\t\talarmInfo.minute = \"--\";\n\t  \talarmInfo.minutesleft = \"-\";\n\t\talarmInfo.tt = \"--\";\n\n\t\treturn alarmInfo;\n\t}\n\n    var dleft;\n    var diff;\n\n    dleft = wds.indexOf(alarmInfo.weekday.toLowerCase()) - now.getDay();\n\n    if (dleft > 0)\n        now.addDays(dleft);\n    else \n\tif (dleft < 0)\n\t\tnow.addDays(7 + dleft);\n\n    alarmInfo.date = parseDate(now, \"mdy\/\");\n    alarmInfo.year = now.getFullYear();\n    alarmInfo.month = now.getMonth();\n    alarmInfo.day = now.getDate();\n    now = new Date();\n\n    diff = dateDiff(parseDate(alarmInfo.date + \" \" + alarmInfo.time), now);\n    alarmInfo.daysleft = diff.days;\n    alarmInfo.hourleft = diff.hours;\n    alarmInfo.minutesleft = diff.minutes;\n    alarmInfo.timeleft = diff.hours + \" h \" + String(parseInt(diff.minutes) - (diff.hours * 60)) + \" m\";\n\n\n    if (isNullOrEmpty(alarmInfo.tt))\n\t{\n        if (alarmInfo.hour < 10)\n            alarmInfo.hour = String(\"0\" + alarmInfo.hour);\n        if (alarmInfo.minute < 10)\n            alarmInfo.minute = String(\"0\" + alarmInfo.minute);\n    }\n\n    if ((alarmInfo.daysleft == 0) && (alarmInfo.minutesleft < todayleft))\n        alarmInfo.day = \"Today\";\n    else\n\t{\n        if (alarmInfo.daysleft <= 1)\n            alarmInfo.day = \"Tomorrow\";\n        else\n            alarmInfo.day = alarmInfo.day + \".\" + getMonth(alarmInfo.month, \"mm\") + \".\" + alarmInfo.year;\n    }\n\n    return alarmInfo;\n\n}\n\n\/\/returns battery stats\nfunction getBatteryInfo() {\n\n    LL.bindClass(\"android.os.BatteryManager\");\n    LL.bindClass(\"android.content.BroadcastReceiver\");\n    LL.bindClass(\"android.content.Intent\");\n    LL.bindClass(\"android.content.IntentFilter\");\n\n    var ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);\n    var batteryStatus = LL.getContext().registerReceiver(null, ifilter);\n\n    var batt = new Object();\n\n    batt.status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1);\n    batt.level  = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);\n    batt.scale  = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1);\n    batt.isCharging = batt.status == BatteryManager.BATTERY_STATUS_CHARGING;\n    batt.fullCharge = batt.status == BatteryManager.BATTERY_STATUS_FULL;\n    batt.chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);\n    batt.usbCharge = batt.chargePlug == BatteryManager.BATTERY_PLUGGED_USB;\n    batt.acCharge = batt.chargePlug == BatteryManager.BATTERY_PLUGGED_AC;\n    batt.percent = Math.floor((100 * batt.level) \/ batt.scale);\n\n    return batt;\n\n}\n\n\n\/\/send Tasker Intents\nfunction sendTaskerIntents(data) {\n\n    var intent;\n    var params;\n    var sync = true;\n\n    if (data.constructor !== Array)\n        data = data.split(mainSplitter);\n\n    for (var i = 0; i < data.length; i++)\n\t{\n\t\tif (data[i] == \"<sync>\")\n\t\t{\n\t\t\tsync = true;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\tif (data[i] == \"<async>\")\n\t\t{\n\t\t\tsync = false;\n\t\t\tcontinue;\n\t\t}\n        var par = String(data[i]).split(secondarySplitter);\n\t\tintent = new TaskerIntent(par[0]);\n        for (var j = 1; j < par.length; j++)\n\t\t\tintent.addParameter(par[j]);\n\n\t\tLL.sendTaskerIntent(intent, sync);\n\n    }\n\n}\n\n\n\/\/run Scripts\nfunction runScripts(data) {\n\n    var scriptData = null;\n    var params;\n\n    if (data.constructor !== Array)\n        data = data.split(mainSplitter);\n\n    for (var i = 0; i < data.length; i++)\n\t{\n\t\tvar par = String(data[i]).split(secondarySplitter);\n\t\tfor (var j = 1; j < par.length; j++)\n\t\t{\n\t\t\tif (isNullOrEmpty(scriptData))\n\t\t\t\tscriptData = par[j];\n\t\t\telse\n\t\t\t\tscriptData += secondarySplitter + par[j];\n\t\t}\n\n\t\tLL.runScript(par[0], scriptData);\n    }\n\n}\n\nfunction setVarColor(llVarList, name, value) {\n\n\tllVarList.edit()\n\t\t.setInteger(name, value)\n\t\t.commit();\n\n}\n\n\/\/show Toast\nfunction showToast(toastMessage, toastShortLength) {\n\n    var lengthOk = true;\n    if (isNullOrEmpty(toastShortLength) == true)\n        lengthOk = false;\n\n    Android.makeNewToast(toastMessage, lengthOk).show();\n\n}\n\n\/\/read file\nfunction readFile(filePath) {\n    var file = new File(filePath);\n    var r = new BufferedReader(new FileReader(file));\n    var s = \"\";\n    var l;\n    while ((l = r.readLine()) != null)\n        s += (l + \"\\n\");\n    return s;\n    \/\/var s = read(LL.getContext().getFilesDir().getPath()+\"\/pages\/\"+c.getId()+\"\/conf\");\n}\n\n\/\/write file\nfunction writeFile(filePath, text) {\n\n    var fw = new FileWriter(new File(filePath));\n    fw.write(text);\n    fw.close();\n\n}\n","name":"zScriptFunctionLibrary"}